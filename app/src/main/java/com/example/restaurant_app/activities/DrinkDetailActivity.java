package com.example.restaurant_app.activities;import android.annotation.SuppressLint;import android.app.Activity;import android.app.AlertDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.drawable.BitmapDrawable;import android.net.Uri;import android.os.Bundle;import android.provider.MediaStore;import android.view.View;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.ImageView;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import com.example.restaurant_app.adapters.SharedPreferencesAdapter;import com.example.restaurant_app.firestore.CategoryFirestoreManager;import com.example.restaurant_app.firestore.DrinkFirestoreManager;import com.example.restaurant_app.firestore.PictureFirestoreManager;import com.example.restaurant_app.models.CategorySpinner;import com.example.restaurant_app.models.Drink;import com.example.restaurant_app.models.User;import com.google.gson.Gson;import java.util.ArrayList;/** * * @author Jonas Mitschke * @content activity for drink-detail */public class DrinkDetailActivity extends Activity {    private static final int GALLERY_REQUEST_CODE = 1;    private DrinkFirestoreManager drinkManager;    private CategoryFirestoreManager categoryManager;    private PictureFirestoreManager pictureManager;    private Spinner spinner;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.drink_detail);        drinkManager = DrinkFirestoreManager.newInstance();        categoryManager = CategoryFirestoreManager.newInstance();        pictureManager = PictureFirestoreManager.newInstance();        final String drinkID = getIntent().getExtras().getString("drinkID");        final Context context = getBaseContext();        final Activity this_activity = this;        Gson gson = new Gson();        final User curUser = gson.fromJson(SharedPreferencesAdapter.getDefaults("currentUser", context), User.class);        if (drinkID == null) throw new AssertionError();        /**         * checks if user want to update existing drink         */        if(!drinkID.equals("0")) {            drinkManager.getDrinkById(drinkID, new DrinkFirestoreManager.GetDrinkByIdCallback() {                @SuppressLint("SetTextI18n")                @Override                public void onCallback(final Drink drink) {                    ((TextView) findViewById(R.id.drinkUpdateName)).setText(drink.getName());                    ((TextView) findViewById(R.id.drinkUpdatePrice)).setText(Double.toString(drink.getPrice()));                    ((TextView) findViewById(R.id.drinkUpdateDescription)).setText(drink.getDescription());                    pictureManager.downloadImage(drink.getPictureUrl(), new PictureFirestoreManager.DownloadCallback() {                        @Override                        public void onCallback(Bitmap picture) {                            ((ImageView) findViewById(R.id.drinkPicture)).setImageBitmap(picture);                        }                    });                    categoryManager.getCategoriesByRestaurantIdSpinner(curUser.getRestaurant().getRestaurantId(), new CategoryFirestoreManager.GetCategoryByRestaurantForSpinnerCallback(){                        @Override                        public void onCallback(ArrayList<CategorySpinner> categories) {                            ArrayAdapter<CategorySpinner> adapter = new ArrayAdapter<CategorySpinner>(context, android.R.layout.simple_spinner_dropdown_item, categories);                            spinner = (Spinner) findViewById(R.id.drinkUpdateCategory);                            spinner.setAdapter(adapter);                        }                        @Override                        public void onFailureCallback(Exception e) {                            Intent intent = new Intent(this_activity, DrinkListActivity.class);                            this_activity.startActivity(intent);                            Toast toast = Toast.makeText(getApplicationContext(), getResources().getString(R.string.toast_error), Toast.LENGTH_LONG);                            toast.show();                        }                    });                    final ImageView drinkPicture = findViewById(R.id.drinkPicture);                    drinkPicture.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View view) {                            pickFromGallery();                        }                    });                    final Button saveButton = findViewById(R.id.drinkUpdateSaveButton);                    saveButton.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            final String name = ((TextView) findViewById(R.id.drinkUpdateName)).getText().toString();                            String price_help = ((TextView) findViewById(R.id.drinkUpdatePrice)).getText().toString();                            final Double price = Double.parseDouble(price_help);                            final String description = ((TextView) findViewById(R.id.drinkUpdateDescription)).getText().toString();                            final Bitmap picture = ((BitmapDrawable)((ImageView) findViewById(R.id.drinkPicture)).getDrawable()).getBitmap();                            Boolean success = pictureManager.updateImage(drink.getPictureUrl(), picture);                            if (success) {                                Spinner mySpinner = (Spinner) findViewById(R.id.drinkUpdateCategory);                                CategorySpinner categorySpinnerItem = (CategorySpinner) mySpinner.getSelectedItem();                                drink.setName(name);                                drink.setCategoryId(categorySpinnerItem.getId());                                drink.setPrice(price);                                drink.setDescription(description);                                drinkManager.updateDrink(drink);                                Intent intent = new Intent(v.getContext(), DrinkListActivity.class);                                v.getContext().startActivity(intent);                            } else {                                Toast toast = Toast.makeText(getApplicationContext(), getResources().getString(R.string.toast_error_picture_upload), Toast.LENGTH_LONG);                                toast.show();                            }                        }                    });                    final Button deleteButton = findViewById(R.id.drinkUpdateDeleteButton);                    deleteButton.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(final View v) {                            if (curUser.getRestaurant().getRestaurantId().equals(drink.getRestaurantId())) {                                AlertDialog.Builder builder = new AlertDialog.Builder(DrinkDetailActivity.this);                                builder.setMessage(R.string.dialog_delete_drink)                                        .setPositiveButton(R.string.button_confirm, new DialogInterface.OnClickListener() {                                            public void onClick(DialogInterface dialog, int id) {                                                pictureManager.deleteImage(drink.getPictureUrl());                                                drinkManager.deleteDrink(drink.getDrinkId());                                                Intent intent = new Intent(v.getContext(), DrinkListActivity.class);                                                v.getContext().startActivity(intent);                                            }                                        })                                        .setNegativeButton(R.string.button_cancel, null).show();                            } else {                                Toast toast = Toast.makeText(getApplicationContext(), getResources().getString(R.string.toast_no_permition), Toast.LENGTH_LONG);                                toast.show();                            }                        }                    });                }                @Override                public void onFailureCallback(Exception e) {                    Intent intent = new Intent(this_activity, DrinkListActivity.class);                    this_activity.startActivity(intent);                    Toast toast = Toast.makeText(getApplicationContext(), getResources().getString(R.string.toast_error), Toast.LENGTH_LONG);                    toast.show();                }            });        }        /**         * else: user want to create a new drink         */        else {            findViewById(R.id.drinkUpdateDeleteButton).setVisibility(View.INVISIBLE);            categoryManager.getCategoriesByRestaurantIdSpinner(curUser.getRestaurant().getRestaurantId(), new CategoryFirestoreManager.GetCategoryByRestaurantForSpinnerCallback(){                @Override                public void onCallback(ArrayList<CategorySpinner> categories) {                    if (categories.size() > 0) {                        ArrayAdapter<CategorySpinner> adapter = new ArrayAdapter<CategorySpinner>(context, android.R.layout.simple_spinner_dropdown_item, categories);                        spinner = (Spinner) findViewById(R.id.drinkUpdateCategory);                        spinner.setAdapter(adapter);                    } else {                        Intent intent = new Intent(this_activity, DrinkListActivity.class);                        this_activity.startActivity(intent);                        Toast toast = Toast.makeText(getApplicationContext(), getResources().getString(R.string.toast_error_no_category_available), Toast.LENGTH_LONG);                        toast.show();                    }                }                @Override                public void onFailureCallback(Exception e) {                    Intent intent = new Intent(this_activity, DrinkListActivity.class);                    this_activity.startActivity(intent);                    Toast toast = Toast.makeText(getApplicationContext(), getResources().getString(R.string.toast_error), Toast.LENGTH_LONG);                    toast.show();                }            });            final ImageView drinkPicture = findViewById(R.id.drinkPicture);            drinkPicture.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View view) {                    pickFromGallery();                }            });            final Button saveButton = findViewById(R.id.drinkUpdateSaveButton);            saveButton.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View view) {                    final String name = ((TextView) findViewById(R.id.drinkUpdateName)).getText().toString();                    String price_help = ((TextView) findViewById(R.id.drinkUpdatePrice)).getText().toString();                    final Double price = Double.parseDouble(price_help);                    final String description = ((TextView) findViewById(R.id.drinkUpdateDescription)).getText().toString();                    final BitmapDrawable pictureBitmapDrawable = (BitmapDrawable)((ImageView) findViewById(R.id.drinkPicture)).getDrawable();                    if (pictureBitmapDrawable == null) {                        Toast toast = Toast.makeText(getApplicationContext(), getResources().getString(R.string.toast_no_picture_set), Toast.LENGTH_LONG);                        toast.show();                    } else {                        String pictureUrl = pictureManager.uploadImage(pictureBitmapDrawable.getBitmap());                        if (pictureUrl == null) {                            Toast toast = Toast.makeText(getApplicationContext(), getResources().getString(R.string.toast_error_picture_upload), Toast.LENGTH_LONG);                            toast.show();                        } else {                            Spinner mySpinner = (Spinner) findViewById(R.id.drinkUpdateCategory);                            CategorySpinner categorySpinnerItem = (CategorySpinner) mySpinner.getSelectedItem();                            Drink newDrink = new Drink(curUser.getRestaurant().getRestaurantId(), categorySpinnerItem.getId(), name, price, description, pictureUrl);                            drinkManager.createDrink(newDrink);                            Intent intent = new Intent(view.getContext(), DrinkListActivity.class);                            view.getContext().startActivity(intent);                        }                    }                }            });        }    }    //picture picker    private void pickFromGallery(){        //Create an Intent with action as ACTION_PICK        Intent intent=new Intent(Intent.ACTION_PICK);        // Sets the type as image/*. This ensures only components of type image are selected        intent.setType("image/*");        //We pass an extra array with the accepted mime types. This will ensure only components with these MIME types as targeted.        String[] mimeTypes = {"image/jpeg", "image/png"};        intent.putExtra(Intent.EXTRA_MIME_TYPES,mimeTypes);        // Launching the Intent        startActivityForResult(intent, GALLERY_REQUEST_CODE);    }    @Override    public void onActivityResult(int requestCode,int resultCode,Intent data){        // Result code is RESULT_OK only if the user selects an Image        if (resultCode == Activity.RESULT_OK)            switch (requestCode){                case GALLERY_REQUEST_CODE:                    //data.getData returns the content URI for the selected Image                    Uri selectedImageUri = data.getData();                    String[] filePathColumn = { MediaStore.Images.Media.DATA };                    // Get the cursor                    Cursor cursor = getContentResolver().query(selectedImageUri, filePathColumn, null, null, null);                    // Move to first row                    cursor.moveToFirst();                    //Get the column index of MediaStore.Images.Media.DATA                    int columnIndex = cursor.getColumnIndex(filePathColumn[0]);                    //Gets the String value in the column                    String imgDecodableString = cursor.getString(columnIndex);                    cursor.close();                    // Set the Image in ImageView after decoding the String                    ImageView drinkPicture = findViewById(R.id.drinkPicture);                    drinkPicture.setImageBitmap(BitmapFactory.decodeFile(imgDecodableString));                    break;            }    }}